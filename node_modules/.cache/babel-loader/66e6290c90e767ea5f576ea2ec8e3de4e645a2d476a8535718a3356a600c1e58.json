{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\blogs-context-starter\\\\src\\\\Components\\\\Blogs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { AppContext } from '../Context/AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Blogs() {\n  _s();\n  const {\n    posts,\n    loading\n  } = useContext(AppContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this) // Replace with your Spinner component\n    : posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No posts found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"by \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 18\n        }, this), \" on \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted on \", post.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: post.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"#\", tag]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_s(Blogs, \"WuLzHNx6GIkkx4nYGqeolh7QmOc=\");\n_c = Blogs;\nexport default Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","useContext","AppContext","jsxDEV","_jsxDEV","Blogs","_s","posts","loading","children","Spinner","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","title","author","category","date","content","tags","tag","index","id","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/blogs-context-starter/src/Components/Blogs.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { AppContext } from '../Context/AppContext';\r\n\r\nfunction Blogs() {\r\n  const { posts, loading } = useContext(AppContext);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Spinner /> // Replace with your Spinner component\r\n      ) : posts.length === 0 ? (\r\n        <div>\r\n          <p>No posts found</p>\r\n        </div>\r\n      ) : (\r\n        posts.map(post => (\r\n          <div key={post.id}>\r\n            <p>{post.title}</p>\r\n            <p>\r\n              by <span>{post.author}</span> on <span>{post.category}</span>\r\n            </p>\r\n            <p>Posted on {post.date}</p>\r\n            <p>{post.content}</p>\r\n            <div>\r\n              {post.tags.map((tag, index) => (\r\n                <span key={index}>#{tag}</span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,UAAU,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,UAAU,CAACC,UAAU,CAAC;EAEjD,oBACEE,OAAA;IAAAK,QAAA,EACGD,OAAO,gBACNJ,OAAA,CAACM,OAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,CAAC;IAAA,EACVP,KAAK,CAACQ,MAAM,KAAK,CAAC,gBACpBX,OAAA;MAAAK,QAAA,eACEL,OAAA;QAAAK,QAAA,EAAG;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjB,GAENP,KAAK,CAACS,GAAG,CAACC,IAAI,iBACZb,OAAA;MAAAK,QAAA,gBACEL,OAAA;QAAAK,QAAA,EAAIQ,IAAI,CAACC;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACnBV,OAAA;QAAAK,QAAA,GAAG,KACE,eAAAL,OAAA;UAAAK,QAAA,EAAOQ,IAAI,CAACE;QAAM;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,QAAI,eAAAV,OAAA;UAAAK,QAAA,EAAOQ,IAAI,CAACG;QAAQ;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3D,eACJV,OAAA;QAAAK,QAAA,GAAG,YAAU,EAACQ,IAAI,CAACI,IAAI;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC5BV,OAAA;QAAAK,QAAA,EAAIQ,IAAI,CAACK;MAAO;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACrBV,OAAA;QAAAK,QAAA,EACGQ,IAAI,CAACM,IAAI,CAACP,GAAG,CAAC,CAACQ,GAAG,EAAEC,KAAK,kBACxBrB,OAAA;UAAAK,QAAA,GAAkB,GAAC,EAACe,GAAG;QAAA,GAAZC,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE;IAAA,GAXEG,IAAI,CAACS,EAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAalB;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACR,EAAA,CA9BQD,KAAK;AAAAsB,EAAA,GAALtB,KAAK;AAgCd,eAAeA,KAAK;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}