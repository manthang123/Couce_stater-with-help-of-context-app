{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\blogs-context-starter\\\\src\\\\Context\\\\AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { AppContext } from '../Context/AppContext';\nimport Spinner from './Spinner'; // Assuming you have a Spinner component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Blogs() {\n  _s();\n  const {\n    posts,\n    loading,\n    fetchBlogPosts,\n    handlePageChange,\n    page,\n    totalPages\n  } = useContext(AppContext);\n  useEffect(() => {\n    // Fetch blog posts when component mounts\n    fetchBlogPosts();\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this); // Display spinner while loading\n  }\n\n  if (posts.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No posts found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this); // Display message if no posts\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"by \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 16\n        }, this), \" on \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted on \", post.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: post.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"#\", tag]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handlePageChange(page - 1),\n      disabled: page === 1,\n      children: \"Previous Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handlePageChange(page + 1),\n      disabled: page === totalPages,\n      children: \"Next Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Blogs, \"DFFXJ8HlyABP4Y2uM7CFRpNHHF0=\");\n_c = Blogs;\nexport default Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","useContext","useEffect","AppContext","Spinner","jsxDEV","_jsxDEV","Blogs","_s","posts","loading","fetchBlogPosts","handlePageChange","page","totalPages","fileName","_jsxFileName","lineNumber","columnNumber","length","children","map","post","title","author","category","date","content","tags","tag","index","id","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/blogs-context-starter/src/Context/AppContext.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../Context/AppContext';\r\nimport Spinner from './Spinner'; // Assuming you have a Spinner component\r\n\r\nfunction Blogs() {\r\n  const {\r\n    posts,\r\n    loading,\r\n    fetchBlogPosts,\r\n    handlePageChange,\r\n    page,\r\n    totalPages\r\n  } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    // Fetch blog posts when component mounts\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array ensures this effect runs only once on mount\r\n\r\n  if (loading) {\r\n    return <Spinner />; // Display spinner while loading\r\n  }\r\n\r\n  if (posts.length === 0) {\r\n    return <div>No posts found</div>; // Display message if no posts\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {posts.map(post => (\r\n        <div key={post.id}>\r\n          <p>{post.title}</p>\r\n          <p>\r\n            by <span>{post.author}</span> on <span>{post.category}</span>\r\n          </p>\r\n          <p>Posted on {post.date}</p>\r\n          <p>{post.content}</p>\r\n          <div>\r\n            {post.tags.map((tag, index) => (\r\n              <span key={index}>#{tag}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      {/* Example of pagination controls */}\r\n      <button\r\n        onClick={() => handlePageChange(page - 1)}\r\n        disabled={page === 1}\r\n      >\r\n        Previous Page\r\n      </button>\r\n      <button\r\n        onClick={() => handlePageChange(page + 1)}\r\n        disabled={page === totalPages}\r\n      >\r\n        Next Page\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}